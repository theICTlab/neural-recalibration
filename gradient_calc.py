# -*- coding: utf-8 -*-
"""gradient_calc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XywjS_NrCeVLNc1JLPFiSxLZxoC_13yy
"""

from sympy import symbols, cos, sin, Matrix, pretty, pi, simplify, sqrt, diff


tx, ty, tz, r1, r2, r3, r4, r5, r6, r7, r8, r9 = symbols('tx ty tz r1 r2 r3 r4 r5 r6 r7 r8 r9')
fc1, fc2, pp1, pp2, kc1, kc2, kc3, kc4, kc5, epsilon = symbols('fc1 fc2 pp1 pp2 kc1 kc2 kc3 kc4 kc5 epsilon')
x, y, z = symbols('x y z')


R = Matrix([
    [r1, r2, r3],
    [r4, r5, r6],
    [r7, r8, r9]
])

T = Matrix([tx, ty, tz])

K = Matrix([
    [fc1, 0, pp1],
    [0, fc2, pp2],
    [0, 0, 1]
])



# forward pass
R_inv = R.T
points_minus_t = Matrix([x - tx, y - ty, z - tz])
P = R_inv * points_minus_t
P_image = K * P
X_normalized = P_image[0] / P_image[2]
Y_normalized = P_image[1] / P_image[2]

# radial and tangential distortion
r22 = X_normalized**2 + Y_normalized**2
radial = 1 + kc1 * r22 + kc2 * r22**2 + kc5 * r22**3
dx = 2*kc3*X_normalized*Y_normalized + kc4*(r22 + 2*X_normalized**2)
dy = kc3*(r22 + 2*Y_normalized**2) + 2*kc4*X_normalized*Y_normalized
X_distorted = X_normalized * radial + dx
Y_distorted = Y_normalized * radial + dy

# Define loss function (e.g., L2 loss between distorted points and actual 2D points)
X_distorted_actual, Y_distorted_actual = symbols('X_distorted_actual Y_distorted_actual')
mse_loss = ((X_distorted - X_distorted_actual)**2 + (Y_distorted - Y_distorted_actual)**2)/2
rmse_loss = sqrt(mse_loss)


parameter_values = {
    X_distorted_actual:100,
    Y_distorted_actual: 200,
    x: 100,
    y: 200,
    z: 300,
    tx: 0.1,
    ty: -0.2,
    tz: 0.3,
    r1: 0.9,
    r2: 0.1,
    r3: -0.1,
    r4: 0.1,
    r5: 0.8,
    r6: 0.05,
    r7: 0.05,
    r8: -0.1,
    r9: 0.9,
    fc1: 1630,
    fc2: 1630,
    pp1: 640,
    pp2: 480,
    kc1: 0.01,
    kc2: 0.001,
    kc3: 0.002,
    kc4: 0.003,
    kc5: 0.0001,
}

parameter_values_grad = [
    fc1,
    fc2,
    pp1,
    pp2,
    kc1,
    kc2,
    kc3,
    kc4,
    kc5,
]

# d_loss_d_fc1 = sp.diff(rmse_loss, fc1)
# print(d_loss_d_fc1.subs(parameter_values))

# Calculate gradients with respect to parameters
gradients = {param: simplify(rmse_loss.diff(param)) for param in parameter_values_grad}

# Print gradients
for param, gradient in gradients.items():
  print(f"Gradient of loss with respect to {param}: {gradient}")
  print(f"Gradient of loss with respect to {param}: {simplify(gradient.subs(parameter_values))}")

"""Calculate Loss with respect to the intrinsics parameters"""

d_loss_d_fc1 = simplify(diff(rmse_loss, fc1))
d_loss_d_fc2 = simplify(diff(rmse_loss, fc2))
d_loss_d_pp1 = simplify(diff(rmse_loss, pp1))
d_loss_d_pp2 = simplify(diff(rmse_loss, pp2))
d_loss_d_kc1 = simplify(diff(rmse_loss, kc1))
d_loss_d_kc2 = simplify(diff(rmse_loss, kc2))
d_loss_d_kc3 = simplify(diff(rmse_loss, kc3))
d_loss_d_kc4 = simplify(diff(rmse_loss, kc4))
d_loss_d_kc5 = simplify(diff(rmse_loss, kc5))

print("d_loss_d_fc1 is: ", pretty(d_loss_d_fc1))
print("\n")
print("d_loss_d_fc2 is: ", pretty(d_loss_d_fc2))
print("\n")
print("d_loss_d_pp1 is: ", pretty(d_loss_d_pp1))
print("\n")
print("d_loss_d_pp2 is: ", pretty(d_loss_d_pp2))
print("\n")
print("d_loss_d_kc1 is: ", pretty(d_loss_d_kc1))
print("\n")
print("d_loss_d_kc2 is: ", pretty(d_loss_d_kc2))
print("\n")
print("d_loss_d_kc3 is: ", pretty(d_loss_d_kc3))
print("\n")
print("d_loss_d_kc4 is: ", pretty(d_loss_d_kc4))
print("\n")
print("d_loss_d_kc5 is: ", pretty(d_loss_d_kc5))

